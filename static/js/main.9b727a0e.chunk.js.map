{"version":3,"sources":["Shared/Components/Layout.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","drawer","width","flexShrink","drawerPaper","top","contentHeader","height","content","flexGrow","padding","spacing","transition","transitions","create","easing","sharp","duration","leavingScreen","contentShift","easeOut","enteringScreen","marginLeft","Layout","props","_React$useState","React","useState","_React$useState2","Object","slicedToArray","openDrawer","setOpenDrawer","classes","react_default","a","createElement","Fragment","AppBar","position","Toolbar","IconButton","color","aria-label","edge","onClick","Menu","Typography","variant","noWrap","className","Drawer","anchor","open","paper","Divider","List","map","text","index","ListItem","button","key","ListItemIcon","Inbox","Mail","ListItemText","primary","clsx","defineProperty","children","App","Dashboard","lazy","Promise","all","__webpack_require__","e","then","bind","Layout_Layout","react_router_dom","basename","process","react","fallback","react_router","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9b727a0e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {\r\n  AppBar,\r\n  Toolbar,\r\n  IconButton,\r\n  Typography,\r\n  Drawer,\r\n  List,\r\n  ListItem,\r\n  ListItemIcon,\r\n  ListItemText,\r\n  Divider,\r\n  makeStyles,\r\n  Theme,\r\n  createStyles\r\n} from \"@material-ui/core\";\r\nimport { Menu, Inbox, Mail } from \"@material-ui/icons\";\r\nimport clsx from \"clsx\";\r\n\r\nconst drawerWidth = 240;\r\nconst topBarHeight = 64;\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    drawer: {\r\n      width: drawerWidth,\r\n      flexShrink: 0\r\n    },\r\n    drawerPaper: {\r\n      width: drawerWidth,\r\n      top: topBarHeight\r\n    },\r\n    contentHeader: {\r\n      height: topBarHeight\r\n    },\r\n    content: {\r\n      flexGrow: 1,\r\n      padding: theme.spacing(3),\r\n      transition: theme.transitions.create(\"margin\", {\r\n        easing: theme.transitions.easing.sharp,\r\n        duration: theme.transitions.duration.leavingScreen\r\n      })\r\n    },\r\n    contentShift: {\r\n      transition: theme.transitions.create(\"margin\", {\r\n        easing: theme.transitions.easing.easeOut,\r\n        duration: theme.transitions.duration.enteringScreen\r\n      }),\r\n      marginLeft: drawerWidth\r\n    }\r\n  })\r\n);\r\n\r\nexport const Layout = (props: React.PropsWithChildren<{}>) => {\r\n  const [openDrawer, setOpenDrawer] = React.useState(false);\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <>\r\n      <AppBar position=\"fixed\">\r\n        <Toolbar>\r\n          <IconButton\r\n            color=\"inherit\"\r\n            aria-label=\"open drawer\"\r\n            edge=\"start\"\r\n            onClick={() => setOpenDrawer(!openDrawer)}\r\n          >\r\n            <Menu />\r\n          </IconButton>\r\n          <Typography variant=\"h6\" noWrap>\r\n            Persistent drawer\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <main>\r\n        <div className={classes.contentHeader} />\r\n        <Drawer\r\n          className={classes.drawer}\r\n          variant=\"persistent\"\r\n          anchor=\"left\"\r\n          open={openDrawer}\r\n          classes={{\r\n            paper: classes.drawerPaper\r\n          }}\r\n        >\r\n          <Divider />\r\n          <List>\r\n            {[\"Inbox\", \"Starred\", \"Send email\", \"Drafts\"].map((text, index) => (\r\n              <ListItem button key={text}>\r\n                <ListItemIcon>\r\n                  {index % 2 === 0 ? <Inbox /> : <Mail />}\r\n                </ListItemIcon>\r\n                <ListItemText primary={text} />\r\n              </ListItem>\r\n            ))}\r\n          </List>\r\n          <Divider />\r\n          <List>\r\n            {[\"All mail\", \"Trash\", \"Spam\"].map((text, index) => (\r\n              <ListItem button key={text}>\r\n                <ListItemIcon>\r\n                  {index % 2 === 0 ? <Inbox /> : <Mail />}\r\n                </ListItemIcon>\r\n                <ListItemText primary={text} />\r\n              </ListItem>\r\n            ))}\r\n          </List>\r\n        </Drawer>\r\n        <div\r\n          className={clsx(classes.content, {\r\n            [classes.contentShift]: openDrawer\r\n          })}\r\n        >\r\n          {props.children}\r\n        </div>\r\n      </main>\r\n    </>\r\n  );\r\n};\r\n","import React, { Suspense } from \"react\";\nimport \"./App.css\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { Layout } from \"./Shared/Components/Layout\";\n\nconst App: React.FC = () => {\n  const Dashboard = React.lazy(() => import(\"./Pages/Dashboard/Dashboard\"));\n  return (\n    <Layout>\n      <Router basename={process.env.PUBLIC_URL}>\n        <Suspense fallback={<div>Loading...</div>}>\n          <Switch>\n            <Route exact path=\"/\" component={Dashboard} />\n          </Switch>\n        </Suspense>\n      </Router>\n    </Layout>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(\n            (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n            window.location.href\n        );\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}