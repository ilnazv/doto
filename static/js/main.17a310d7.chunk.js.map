{"version":3,"sources":["Shared/Components/Layout.tsx","Pages/Dashboard/HeroService.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","main","background","top","left","height","width","position","concat","zIndex","contentHeader","Object","objectSpread","mixins","toolbar","content","flexGrow","padding","spacing","transition","transitions","create","easing","sharp","duration","leavingScreen","contentShift","easeOut","enteringScreen","marginLeft","Layout","props","classes","setMinimized","loading","react_default","a","createElement","Fragment","AppBar","Toolbar","Grid","container","direction","justify","alignItems","item","IconButton","color","aria-label","edge","onClick","Icon","className","LinearProgress","children","baseApiUrl","heroesService","loadHeroStats","_loadHeroStats","asyncToGenerator","regenerator_default","mark","_callee","url","response","heroes","wrap","_context","prev","next","fetch","sent","json","abrupt","map","x","name","localized_name","imageUrl","img","iconUrl","icon","attack_type","stop","apply","this","arguments","Dashboard","React","lazy","__webpack_require__","e","then","bind","HeroStats","Promise","all","createMuiTheme","App","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleToggle","setState","minimized","state","getHeroByName","find","includes","_this2","_this3","_this$state","react_router_dom","basename","process","MuiThemeProvider","Layout_Layout","react","fallback","react_router","exact","path","render","key","assign","hero","match","params","id","Component","Boolean","window","location","hostname","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.17a310d7.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {\r\n  AppBar,\r\n  Toolbar,\r\n  IconButton,\r\n  makeStyles,\r\n  Theme,\r\n  createStyles,\r\n  Icon,\r\n  LinearProgress,\r\n  Grid\r\n} from \"@material-ui/core\";\r\n\r\nconst drawerWidth = 240;\r\nconst gradColor0 = \"#495591\";\r\nconst gradColor1 = \"#1e254c\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    main: {},\r\n\r\n    background: {\r\n      top: 0,\r\n      left: 0,\r\n      height: \"calc(100% + 56px)\", //56px - mobile browser address bar size\r\n      width: \"100%\",\r\n      position: \"fixed\",\r\n      background: `radial-gradient(ellipse at 0% 0%, ${gradColor0} 0%, ${gradColor1} 100%)`,\r\n      zIndex: -1\r\n    },\r\n    contentHeader: {\r\n      ...theme.mixins.toolbar\r\n    },\r\n    content: {\r\n      flexGrow: 1,\r\n      padding: theme.spacing(3),\r\n      transition: theme.transitions.create(\"margin\", {\r\n        easing: theme.transitions.easing.sharp,\r\n        duration: theme.transitions.duration.leavingScreen\r\n      })\r\n    },\r\n    contentShift: {\r\n      transition: theme.transitions.create(\"margin\", {\r\n        easing: theme.transitions.easing.easeOut,\r\n        duration: theme.transitions.duration.enteringScreen\r\n      }),\r\n      marginLeft: drawerWidth\r\n    }\r\n  })\r\n);\r\n\r\nexport const Layout = (\r\n  props: React.PropsWithChildren<{ setMinimized: () => void; loading: boolean }>\r\n) => {\r\n  const classes = useStyles();\r\n  const { setMinimized, loading } = props;\r\n\r\n  return (\r\n    <>\r\n      <AppBar position=\"fixed\">\r\n        <Toolbar>\r\n          <Grid\r\n            container\r\n            direction=\"row\"\r\n            justify=\"flex-end\"\r\n            alignItems=\"flex-end\"\r\n          >\r\n            <Grid item>\r\n              <IconButton\r\n                color=\"inherit\"\r\n                aria-label=\"minimize toggle\"\r\n                edge=\"end\"\r\n                onClick={setMinimized}\r\n              >\r\n                <Icon>photo_size_select_large</Icon>\r\n              </IconButton>\r\n            </Grid>\r\n          </Grid>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <main className={classes.main}>\r\n        <div className={classes.background} />\r\n        <div className={classes.contentHeader} />\r\n        {loading && <LinearProgress />}\r\n        <div className={classes.content}>{props.children}</div>\r\n      </main>\r\n    </>\r\n  );\r\n};\r\n","import { IHero } from \"./Dashboard\";\r\n\r\nconst baseApiUrl = \"https://api.opendota.com\";\r\n\r\nexport const heroesService = {\r\n    loadHeroStats: async () => {\r\n        const url = `${baseApiUrl}/api/heroStats`;\r\n        const response = await fetch(url);\r\n        const heroes = await response.json();\r\n        return heroes.map((x: any) => ({\r\n            name: x.localized_name,\r\n            imageUrl: baseApiUrl + x.img,\r\n            iconUrl: baseApiUrl + x.icon,\r\n            attack_type: x.attack_type\r\n        } as IHero));\r\n    }\r\n}\r\n","import React, { Suspense } from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { Layout } from \"./Shared/Components/Layout\";\nimport { heroesService } from \"./Pages/Dashboard/HeroService\";\nimport { IHero } from \"./Pages/Dashboard/Dashboard\";\nimport { MuiThemeProvider, createMuiTheme } from \"@material-ui/core\";\n\ninterface AppState {\n  minimized: boolean;\n  heroes: IHero[];\n  loading: boolean;\n}\n\nconst Dashboard = React.lazy(() => import(\"./Pages/Dashboard/Dashboard\"));\nconst HeroStats = React.lazy(() => import(\"./Pages/HeroStats/HeroStats\"));\nconst theme = createMuiTheme();\n\nclass App extends React.Component<{}, AppState> {\n  constructor(props: Readonly<{}>) {\n    super(props);\n\n    this.state = {\n      minimized: false,\n      heroes: [],\n      loading: true\n    };\n  }\n\n  componentDidMount() {\n    heroesService.loadHeroStats().then(heroes =>\n      this.setState({\n        heroes,\n        loading: false\n      })\n    );\n  }\n\n  private handleToggle = () => {\n    this.setState({\n      minimized: !this.state.minimized\n    });\n  };\n\n  private getHeroByName = (name: string): IHero => {\n    return (\n      this.state.heroes.find(x => x.name.includes(name)) || {\n        attack_type: \"undefined\",\n        iconUrl: \"undefined\",\n        imageUrl: \"undefined\",\n        name: \"undefined\"\n      }\n    );\n  };\n\n  public render() {\n    const { minimized, heroes, loading } = this.state;\n\n    return (\n      <Router basename={process.env.PUBLIC_URL}>\n        <MuiThemeProvider theme={theme}>\n          <Layout setMinimized={this.handleToggle} loading={loading}>\n            <Suspense fallback={<div>Loading...</div>}>\n              <Switch>\n                <Route\n                  exact\n                  path=\"/\"\n                  render={() => (\n                    <Dashboard\n                      minimized={minimized}\n                      heroes={heroes}\n                      key=\"dashboard\"\n                    />\n                  )}\n                />\n                <Route\n                  exact\n                  path=\"/hero/:id\"\n                  render={props => (\n                    <HeroStats\n                      hero={this.getHeroByName(props.match.params.id)}\n                      {...props}\n                      key=\"herostats\"\n                    />\n                  )}\n                />\n              </Switch>\n            </Suspense>\n          </Layout>\n        </MuiThemeProvider>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(\n            (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n            window.location.href\n        );\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}